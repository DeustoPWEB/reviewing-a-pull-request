1. First PR comment
   Hey there, I see you're new around here. As a member of the engineering team, you will be required to get and give pull request reviews before changes can be merged to production. This is important because ... as you can see, I've just opened this pull request and requested a review from you. I haven't done much yet, but would you mind taking a quick look and adding comments.

   Comments are used early in the review process when an explicit approval or request for changes is not yet warranted. 

   You can suggest changes using the ```suggestion ```. 

   - User adds a line comment: PR has a change to `file` with `reviews reviews reviews` "accidentally" entered (i.e. Intro to pull request reviews reviews reviews)
   
1. Second PR comment
   - Bot has added a commit and now it is 30%
   - Content: Guidelines for a 30% review
   - User adds a 30% review
1. Learning Lab
1. Introduction
   - Overview of the course
   - Terminology: Must / Should
     - Must assign themselves
     - Should apply a label 
1. Why we do code review
   - Pull from https://github.com/github/experience-engineering-business/blob/master/guides/code-review.md
1. Review Request overview
   - Formal
   - Informal
   - Uninvited
1. Review Request Example
   - PR w/ student assigned as a reviewer
   - This example will be good to go, so just an approval is needed
1. Code review at GitHub
   - Pull from https://github.com/github/docs/blob/master/docs/crafts/engineering/code-review-at-github.md#how-to-review-a-pr
1. Starting a review
   - Understand the PR (Discern the context section)
   - 30% v 90%
     - 30% section
     - 90% section
     - Overserve the stage of progress section
1. Writing a Review
   - Reviewing the diff
   - Testing it
   - Automated reviews
     - Introduction to sentinel
   - Line level comments
   - Summarizing your review
1. Approving a Pull Request

Auditor: What repos require a peer review and approval in order to deploy?
Auditor: For repos that do not require this, yet allow for deployment of code/configs to production, is there a documented business justification for this configuration that reflects on how risks are addressed with compensating controls elsewhere in the process?
Auditor: When in the process is peer review required?
Auditor: What are the rules around who is considered an appropriate peer reviewer for the changes being made (i.e., product vs internal tools vs prod eng)
Auditor: How can you tell a PR has been appriopriately peer reviewed and signed off
Auditor: Is there an exception process defined for code that requires peer review but must be deployed without it for whatever reason?

